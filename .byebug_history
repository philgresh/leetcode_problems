q
n
factors
q
factors
q
n
k
factors
q
k
factors
c
display n
n
q
display n
n
display factors
display i
c
display root
c
q
result
n
left
n
display prev
display root.val
root.val
n
root.val
n
prev
n
root.val
root
n
p_ancestors
n
prev.concat(result)
prev
result
search_val
result
n
prev
root.val
root
left
n
root.val
n
prev
n
prev
n
root.val
root
c
display j
display i
c
q
c
s
n
q
brackets
char_i
brackets[char_i]
char_j
display i
n
s
n
c
q
brackets[i]
s
n
display char_j
display char_i
exit
a[j]
c
a[j]
c
a[j]
subs
c
n
a[j]
a[j
subs
c
n
display j
display i
distinct
c
n
pairs
n
pairs
a[j]
n
distinct.include?(a[j])
distinct
n
pairs
distinct
n
display j
display i
exit
distinct.length < k
n
display pairs
display j
display i
n
exit
pairs
distinct
n
exit
n
distinct
n
distinct
s
display j
display i
exit
rand_a = BigDecimal(rand(2..num - 1).to_s)
rand_a ** s
rand_a
display v
v
n
exit
16.pow(2)
2.pow(2)
2.exp(2)
rand_a
display v
v
exit
display t
display s
n
display n
exit
display t
display s
s
n
display n
n
c
n
start
num
s
exit
start
num
s
n
primes.last
num
exit
c
start
num
c
exit
c
exit
new_prev
n
display add
display combo
add
s
add
combo
s
prev
c
n
visited
stack
n
stack
visited
n
stack
sack
visited
n
visited
stack
n
stack
n
exit
n
stack
n
stack
n
graph[w]
stack
n
visited
n
s
stack
visited
exit
stack
stack.last
s
graph[0]
stack
exit
stack
