# https://leetcode.com/explore/challenge/card/march-leetcoding-challenge-2021/589/week-2-march-8th-march-14th/3665/
# Remove Palindromic Subsequences

# Given a string s consisting only of letters 'a' and 'b'. In a single step 
# you can remove one palindromic subsequence from s.

# Return the minimum number of steps to make the given string empty.

# A string is a subsequence of a given string, if it is generated by 
# deleting some characters of a given string without changing its order.

# A string is called palindrome if is one that reads the same backward 
# as well as forward.

# Strategy:
# Check to see if the whole string is a palindrome
#   If so, return 1
#   If not, return 2, we'll just remove all the A's and B's like a barbarian.

# Edge cases:
#   Empty string => 0

# Time complexity: O(n) - worst case, we need to iterate through the whole string
# Space complexity: O(1)

# @param {String} s
# @return {Integer}
def remove_palindrome_sub(s)
  return 0 if s.size == 0
  return 1 if s == s.reverse
  return 2
end


# Example 1:

# Input: 
s= "ababa"
# Output: 1
puts remove_palindrome_sub(s)
# Explanation: String is already palindrome

# Example 2:

# Input: 
s= "abb"
# Output: 2
puts remove_palindrome_sub(s)
# Explanation: "abb" -> "bb" -> "". 
# Remove palindromic subsequence "a" then "bb".

# Example 3:

# Input: 
s= "baabb"
# Output: 2
puts remove_palindrome_sub(s)
# Explanation: "baabb" -> "b" -> "". 
# Remove palindromic subsequence "baab" then "b".

# Example 4:

# Input: 
s= ""
# Output: 0
puts remove_palindrome_sub(s)

# Example 5:

# Input: 
s= "bbaabaaa"
# Output: 2
puts remove_palindrome_sub(s)

 

# Constraints:

#     0 <= s.length <= 1000
#     s only consists of letters 'a' and 'b'
